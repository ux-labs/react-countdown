{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","localStorageValues","possibleConstructorReturn","getPrototypeOf","call","getFromLocalStorage","state","value","initialValue","initial","theme","color","counting","audioRef","React","createRef","handleChange","bind","assertThisInitialized","handleKeyUp","handleSubmit","handleSwapTheme","handleReset","time","localStorage","setFromLocalStorage","arguments","length","undefined","event","setState","stopCounter","current","pause","eventKey","key","target","invalid","validity","patternMismatch","startCounter","preventDefault","newTheme","_this2","timerID","setInterval","decrement","clearInterval","play","console","warn","_context","t0","count","bip","Math","floor","random","final","src","playAudio","_this3","displayed","minutes","split","seconds","percent","soundAlarm","setTimeout","react_default","a","createElement","onSubmit","className","type","id","style","onChange","onKeyUp","placeholder","maxLength","pattern","title","required","onClick","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.461cacfc.chunk.js","sourcesContent":["import React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const localStorageValues = this.getFromLocalStorage('5:00', 'default');\n    this.state = {\n      value: localStorageValues.initialValue,\n      initial: localStorageValues.initialValue,\n      theme: localStorageValues.theme,\n      color: 'white',\n      counting: false\n    };\n    this.audioRef = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleSwapTheme = this.handleSwapTheme.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  }\n\n  getFromLocalStorage(time, theme) {\n    if (!localStorage.initialValue || !localStorage.theme) {\n      this.setFromLocalStorage(time, theme);\n    }\n    return { initialValue: localStorage.initialValue, theme: localStorage.theme };\n  }\n\n  setFromLocalStorage(time, theme = 'default') {\n    if (time) {\n      localStorage.initialValue = time;\n    }\n    if (theme) {\n      localStorage.theme = theme;\n    }\n    return { time, theme };\n  }\n  \n  handleReset(event) {\n    this.setState({ \n      color: 'white',\n      value: this.state.initial\n    });\n    this.stopCounter();\n    this.audioRef.current.pause();\n  }\n  \n  handleKeyUp(event) {\n    let eventKey = event.key;\n    let value = event.target.value;\n    let invalid = event.target.validity.patternMismatch;\n    if (eventKey === \"Enter\" || eventKey === \"Tab\" || invalid) {\n      return;\n    }\n    this.setState({ initial: value });\n    this.stopCounter();\n    this.setFromLocalStorage(value);\n  }\n\n\n  handleChange(event) {\n    let value = event.target.value;\n    this.setState({ value: value });\n  }\n  \n  handleSubmit(event) {\n    if (this.state.counting) {\n      this.stopCounter();\n    } else {\n      this.startCounter();\n    }\n    event.preventDefault();\n  }\n  \n  handleSwapTheme(event) {\n    const newTheme = this.state.theme==='default'?'safari':'default';\n    this.setState({theme: newTheme});\n    this.setFromLocalStorage( null, newTheme);\n  }\n\n  startCounter() {\n    this.setState({ counting: true });\n    this.timerID = setInterval(\n      () => this.decrement(),\n      1000\n    );\n  }\n\n  stopCounter() {\n    this.setState({ counting: false });\n    clearInterval(this.timerID);\n  }\n\n  async playAudio() {\n    try {\n      await this.audioRef.current.play();\n    } catch(err) {\n      console.warn(\"Error: \" + err);\n    }\n  }\n\n  soundAlarm(count) {\n    let bip = this.state.theme==='default' ? 'bip' : Math.floor(Math.random() * 9) + 1;\n    let final =  this.state.theme ==='default' ? 'alarm' : 'final';\n    this.audioRef.current.src = \"./sound/\" + (count > 0 ? bip : final) + \".mp3\"\n    return this.playAudio();\n  }\n\n  decrement() {\n    let initial = this.state.initial;\n    let displayed = this.state.value;\n    let minutes = displayed.split(\":\")[0] || 0;\n    let seconds = displayed.split(\":\")[1] || 0;\n\n    let current = ((+minutes * 60) + +seconds);  \n    let total = +(initial.split(\":\")[0] || 0) * 60 + +(initial.split(\":\")[1] || 0);\n    let percent = current / total * 100;\n\n    if (percent < 40) {\n      this.setState({color: 'yellow'});\n    } \n    if (percent < 15) {\n      this.setState({color: 'red'});\n    }\n    \n    seconds--;\n    if (seconds < 0) {\n      seconds = 59;\n      minutes--;\n      this.soundAlarm(minutes+1);\n    }\n    if (minutes < 0) {\n      this.stopCounter();\n      displayed = \"0:00\";\n      setTimeout(()=> { this.handleReset()}, 10000);\n    } else {\n      displayed = minutes + \":\" + (seconds < 10 ? \"0\" + seconds : seconds);\n    }\n    this.setState({value: displayed});\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit} className={this.state.value==='0:00'?'animated':''}>\n      <input type=\"text\" id=\"visor\" \n        style={{color: this.state.color}}\n        value={this.state.value}\n        onChange={this.handleChange}\n        onKeyUp={this.handleKeyUp}\n        placeholder=\"0:00\"\n        maxLength=\"5\" \n        pattern=\"[0-6]?[0-9]+:?[0-6]?[0-9]?\"\n        title=\"Insira um valor no formato minutos : segundos ou um nÃºmero de minutos. Exemplo: 5:30 ou 5.\"\n        required />\n        <div className=\"controles\">\n          <button type=\"button\" id=\"theme\" className={this.state.theme} onClick={this.handleSwapTheme}></button>\n          <button type=\"submit\" id=\"start\" className={this.state.value==='0:00'?`invisivel`:``}>{this.state.counting?`Pausar`:`Iniciar`}</button>\n          <button type=\"button\" id=\"reset\" onClick={this.handleReset} className={this.state.initial === this.state.value?`invisivel`:``}>{`Voltar para ` + this.state.initial}</button>\n        </div>\n        <audio id=\"sound\" ref={this.audioRef} src=\"./sound/bip.mp3\"></audio>\n      </form>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}